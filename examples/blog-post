#!/usr/bin/env -S uvx --from git+https://github.com/varlabz/ask ask-run 

# this example show how to create a blog post on a given topic using multiple agents
# it demonstrates flexible agent creation using create_from_dict method but keeps the code simple by not using separate files for agent configuration
# it does type verification of inputs and outputs using pydantic models for better clarity and maintainability
# it shows how can use multiple agents and multiple models in a single workflow

import asyncio
import sys

from pydantic import Field

from ask.core.agent import AgentASK
from ask.core.tools import ContextASK

llm = {
    "temperature": 0.0,
    "base_url": "http://localhost:12345/v1/",
    "model": "lmstudio:openai-gpt-oss-20b",
}

class Research(ContextASK):
    topic: str = Field(description="The topic of the blog post")

class ResearchResult(ContextASK):
    report: str = Field(description="The research report")
    urls: list[str] = Field(description="List of URLs used in the research")

research_agent = AgentASK[Research, ResearchResult].create_from_dict({
"agent": {
    "instructions": f"""
        You are an expert research assistant.
        Research the topic for a blog post. A well-done research should include:
        - The basic overview of the topic
        - Historical perspective, if applicable
        - Current opinions on the topic, if applicable
        - Any controversies that might be surrounding the topic
        - Any future developments around the topic
        - Collect list of URLs used in the research
        
        Use the tools:
        - Search tool to find relevant URLs in categories general,videos,news,social_media with number of results 30.
        - Fetch tool to retrieve content from the URLs with max length 100000.
        
        Input:
        {Research.to_input()}
    """,
    "output_type": ResearchResult,
},
"mcp": {
    "search": {
        "command": ["uvx", "--from", "git+https://github.com/varlabz/searxng-mcp", "mcp-server"],
    },
    "fetch": {
        "command": ["uvx", "mcp-server-fetch", "--ignore-robots-txt"]
    },
    "sequential_thinking": {
        "command": ["npx", "-y", "@modelcontextprotocol/server-sequential-thinking"],
        "env": {
            "DISABLE_THOUGHT_LOGGING": "true"
        }
    }
},
"llm": llm,
})

class OutlineInput(ContextASK):
    topic: str = Field(description="The blog post topic")
    research: str = Field(description="The research report")

outline_agent = AgentASK[OutlineInput].create_from_dict({
"agent": {
    "instructions": f"""
        You are an expert writer. 
        Examine the initial topic and the research report summary and come up with an outline for a blog post.
        The outline will weave together the following details:
        - The basic overview of the topic
        - Historical perspective, if applicable
        - Current opinions on the topic, if applicable
        - Any controversies that might be surrounding the topic
        - Any future developments around the topic
        The format of the outline is informal, aiming to translate the dry research report summary into an accessible and entertaining read.
        Use sequential thinking to connect the dots and create a compelling narrative.
        
        Input:
        {OutlineInput.to_input()}
        """,
},
"mcp": {
    "sequential_thinking": {
        "command": ["npx", "-y", "@modelcontextprotocol/server-sequential-thinking"],
        "env": {
            "DISABLE_THOUGHT_LOGGING": "true"
        },
    },
},
"llm": llm,
})

class WritePostInput(ContextASK):
    topic: str = Field(description="The blog post topic")
    research: str = Field(description="The research report")
    outline: str = Field(description="The blog post outline")
    
write_post_agent = AgentASK[WritePostInput].create_from_dict({
"agent": {
    "instructions": f"""
        You are an advanced writer. 
        Produce a blog post using the the research report and the blog post outline.
        The blog post will follow the outline and further enrich it with relevant details from the research report.
        The blog post writing style should come across as musings of an intellectual who is trying to examine the topic from various angles.
        Add as much details as possible.
        
        Input:
        {WritePostInput.to_input()}

        Output Format:
        1. Catchy Title.
        2. Engaging introduction that hooks the reader.
        3. TL;DR section with a summary of the main points and key takeaways.
        4. A well-structured blog post.
        5. List of URLs used in the research.
        """,
},
"mcp": {
    "sequential_thinking": {
        "command": ["npx", "-y", "@modelcontextprotocol/server-sequential-thinking"],
        "env": {
           "DISABLE_THOUGHT_LOGGING": "true"
        },
    },
},
"llm": llm,
})

class ScoreInput(ContextASK):
    topic: str = Field(description="The blog post topic")
    article: str = Field(description="The blog post article")

score_agent = AgentASK[ScoreInput, list[dict]].create_from_dict({
"agent": {
    "instructions": f"""
        Role: You are an expert Article Critic. 
        Your persona is that of a seasoned editor with a meticulous eye for detail and a profound understanding of journalistic and literary excellence.

        Task: Conduct a comprehensive review of the article provided below, 
        evaluating it against its stated topic. 
        Your critique must be constructive and professional in tone.

        Format:
        Your analysis must be structured into the five categories listed below. 
        For each category, provide:
        A detailed qualitative assessment.
        A quantitative score out of 20.
        After assessing all categories, provide a final summary and calculate the total score out of 100.

        Critical Review

        1. Clarity & Readability (Score: __/20)
        Assessment: Evaluate the clarity of the language. Is the writing concise and easily understood by the target audience? Is the sentence structure effective and varied? Is vocabulary precise and appropriate, or is there confusing jargon?
        Score:

        2. Depth & Accuracy (Score: __/20)
        Assessment: How comprehensively does the article cover the Stated Topic? Does it stay focused? Is there sufficient detail, evidence, and context? Are arguments well-supported by credible facts, data, or expert opinions? (Use external search tools if necessary to verify accuracy). Are there any significant gaps in the information presented relative to the stated topic?
        Score:

        3. Structure & Organization (Score: __/20)
        Assessment: Analyze the article's logical flow. Does it have a clear introduction that engages the reader, body paragraphs that transition smoothly, and a conclusion that provides a sense of closure? How effective is the use of headings and subheadings in organizing the content?
        Score:

        4. Objectivity & Bias (Score: __/20)
        Assessment: Scrutinize the article for objectivity. Does it present a balanced view with multiple perspectives? Is the author's tone neutral, or does it betray a particular bias? Are claims presented as fact without sufficient evidence?
        Score:

        5. Style & Engagement (Score: __/20)
        Assessment: Evaluate the overall writing style. Is it engaging and does it hold the reader's interest? Is the tone appropriate for the subject matter? Assess the effectiveness of the author's voice.
        Score:

        Final Summary & Total Score
        Overall Summary: Provide a concise, holistic summary of the article's primary strengths and areas for improvement.
        Total Score: (Calculate and insert the sum of the five scores) / 100

        Input:
        {ScoreInput.to_input()}

        Example of output format for each category:
        category: "Clarity & Readability",
        comments: "The article is well-written and easy to understand, with clear language and effective sentence structure."
        score: 18,
        Example of output format for final summary:
        final_summary: "The article provides a comprehensive overview of the topic, with a clear structure and engaging style. However, it could benefit from more depth in certain areas and a more balanced presentation of perspectives.",
        total_score: 85
        """,
    "output_type": list[dict],
},
"llm": {
  "model": "openrouter:moonshotai/kimi-k2",
  "api_key": "file:~/.config/ask/openrouter",
},})

async def main(query: str) -> None:
    research_result: ResearchResult = await research_agent.run(
        Research(topic=query)
    )
    outline_result = await outline_agent.run(
        OutlineInput(
            topic=query, 
            research=research_result.report
        )
    )
    post_result = await write_post_agent.run(
        WritePostInput(
            topic=query,
            research=research_result.report,
            outline=outline_result
        )
    )
    print(post_result)
    score_result = await score_agent.run(
        ScoreInput(
            topic=query,
            article=post_result
        )
    )
    print(score_result, file=sys.stderr)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <blog post topic>")
        sys.exit(1)
    query = sys.argv[1]
    asyncio.run(main(query))